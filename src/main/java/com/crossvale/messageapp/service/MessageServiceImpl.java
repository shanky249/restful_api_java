package com.crossvale.messageapp.service;

import com.crossvale.messageapp.dto.MessageDTO;
import com.crossvale.messageapp.entity.Message;
import com.crossvale.messageapp.exception.ResourceNotFoundException;
import com.crossvale.messageapp.repository.MessageRepository;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import lombok.AllArgsConstructor;

import java.util.List;

@Service
@AllArgsConstructor
public class MessageServiceImpl implements MessageService {
    private final MessageRepository messageRepository;
    private static final Logger LOGGER = LogManager.getLogger(MessageServiceImpl.class);

    @Transactional(readOnly = true)
    @Override
    public List<Message> getAllMessages() {
        LOGGER.info("Fetching all messages");
        List<Message> messages = messageRepository.findAll();
        LOGGER.debug("Fetched {} messages", messages.size());
        return messages;
    }

    @Transactional(readOnly = true)
    @Override
    public Message getMessageById(Integer id) {
        LOGGER.info("Fetching message with id: {}", id);
        Message message = messageRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Message", "id", id));
        LOGGER.debug("Fetched message: {}", message);
        return message;
    }


    @Transactional
    @Override
    public Message createMessage(MessageDTO messageDTO) {
        LOGGER.info("Creating a new message: {}", messageDTO);
        Message message = new Message();
        message.setMessage(messageDTO.getMessage());
        message.setId(null); // Assuming ID is generated by the database
        message = messageRepository.save(message);
        LOGGER.debug("Created message: {}", message);
        return message;
    }


    @Transactional
    @Override
    public Message updateMessage(Integer id, MessageDTO messageDTO) {
        LOGGER.info("Updating message with id: {}", id);
        Message message = messageRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Message", "id", id));
        message.setMessage(messageDTO.getMessage());
        message = messageRepository.save(message);
        LOGGER.debug("Updated message: {}", message);
        return message;
    }

    @Transactional
    @Override
    public void deleteMessage(Integer id) {
        LOGGER.info("Deleting message with id: {}", id);
        Message message = messageRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Message", "id", id));
        messageRepository.delete(message);
        LOGGER.debug("Deleted message with id: {}", id);
    }
}
